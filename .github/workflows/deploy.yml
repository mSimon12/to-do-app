name: Build and Deploy to Cloud Run

env:
  DOCKER_IMAGE_APP_URL: "${{ secrets.GCP_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/deploy-images/to-do-app:latest"

on: [push]
# on:
#   push:
#     branches:
#       - main
#       - stg



jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Clones the repository into the workflowâ€™s runner environment.
    - name: Checkout code
      uses: actions/checkout@v3     

    # Enables the workflow to execute Google Cloud CLI commands
    - name: Authenticate with Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'
        project_id: ${{ secrets.PROJECT_ID }}

    # Install and configure the Google Cloud SDK (gcloud)
    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2   
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Configure Docker to use gcloud as a credential helper
      run: |
        gcloud auth configure-docker ${{ secrets.GCP_LOCATION }}-docker.pkg.dev

    - name: Build Docker image
      run: |
        echo "${{ secrets.ENV_FILE }}" >> api/deploy/.env
        docker build -f api/deploy/Dockerfile.multistage -t ${{ env.DOCKER_IMAGE_APP_URL }} api/
        docker image list

    - name: Push App Docker image
      run: docker push ${{ env.DOCKER_IMAGE_APP_URL }}

    - name: Deploy Application to Cloud Run
      run: |
        gcloud run deploy to-do-app-service \
            --image ${{ env.DOCKER_IMAGE_APP_URL }} \
            --platform managed \
            --region ${{ secrets.GCP_LOCATION }} \
            --port 8080 \
            --memory 512Mi \
            --cpu 1 \
            --max-instances 1 \
            --add-cloudsql-instances ${{ secrets.DB_INSTANCE_CONNECTION_NAME }} \
            --set-env-vars POSTGRES_HOST="/cloudsql/${{ secrets.DB_INSTANCE_CONNECTION_NAME }}" \
            --set-env-vars INSTANCE_CONNECTION_NAME="${{ secrets.DB_INSTANCE_CONNECTION_NAME }}" \
            --set-env-vars POSTGRES_DB="${{ secrets.DB_NAME }}" \
            --set-env-vars POSTGRES_USER="${{ secrets.DB_USER }}" \
            --set-env-vars POSTGRES_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            --allow-unauthenticated
